Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

Tags: Array, Math, Bit Manipulation
Similar Problems: (H) First Missing Positive, (E) Single Number, (H) Find the Duplicate Number



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Math: T = O(n), S = O(1)
class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l = len(nums)
        s = (l * (l + 1)) // 2
        s1 = sum(nums)
        
        return s - s1

### Bit Manipulation: T = O(n), S = O(1)
class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        s = 0
        for i in range(len(nums)):
            s ^= nums[i] ^ (i + 1)
        
        return s
