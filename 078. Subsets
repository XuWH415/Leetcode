Given a set of distinct integers, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

Tags: Array, Backtracking, Bit Manipulation
Similar Problems: (M) Generalized Abbreviation



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Bit Manipulation
class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        k = 2 ** len(nums)
        result = []
        for i in range(k):
            t = []
            j = i
            m = 0
            while j > 0:
                if j & 1:
                    t.append(nums[m])
                j = j >> 1
                m += 1
            result.append(t)
        
        return result
        
### Recursive Adding
class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        import copy
        def solver(nums, i):
            if i == len(nums):
                return [[]]
            
            r = solver(nums, i + 1)
            p = copy.deepcopy(r)
            for s in p:
                s.append(nums[i])
            
            p += r
            return copy.deepcopy(p)
        
        result = solver(nums, 0)
        return result
