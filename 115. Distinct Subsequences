Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.

Tags: Dynamic Programming, String



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

class Solution(object):
    def numDistinct(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: int
        """
        d = [[0] * (len(t) + 1) for x in range(len(s) + 1)]
        
        for i in range(len(s) + 1):
            for j in range(len(t) + 1):
                if j == 0:  # if t[:j] is empty, num of subseq is 1, no matter what s[:i] is
                    d[i][j] = 1
                elif i == 0:    # else if s[:i] is empty, num of subseq is 0
                    d[i][j] = 0
                elif s[i - 1] == t[j - 1]:  # if s[i - 1] matches t[j - 1], d[i - 1][j - 1] is num of seq before this match, and d[i - 1][j] is num of seq not considering this match
                    d[i][j] = d[i - 1][j - 1] + d[i - 1][j]
                else:
                    d[i][j] = d[i - 1][j]
        
        return d[len(s)][len(t)]
