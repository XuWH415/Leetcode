A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

Tags: Dynamic Programming, String



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Dynamic Programming:
class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        def solver(s, i, d):
            l = len(s)
            if i >= l:
                return 1
            
            if s[i] == '0':
                return 0
                
            if i == (l - 1):
                return 1
                
            if i in d:
                return d[i]
            
            if s[i] == '1':
                if s[i + 1] != '0': # '10' has to be together
                    d[i] = solver(s, i + 1, d) + solver(s, i + 2, d)
                else:   # '1x' could be '1x' or '1' + 'x'
                    d[i] = solver(s, i + 2, d)
            elif s[i] == '2':
                if '0' < s[i + 1] < '7':  # '21' to '26' could be both
                    d[i] = solver(s, i + 1, d) + solver(s, i + 2, d)
                else:   # other '2x' can only be together
                    d[i] = solver(s, i + 2, d)
            else:
                d[i] = solver(s, i + 1, d)
            
            return d[i]
            
        if not s:
            return 0
        
        d = dict()
        
        return solver(s, 0, d)
