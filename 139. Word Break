Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.

For example, given
s = "leetcode",
dict = ["leet", "code"].

Return true because "leetcode" can be segmented as "leet code".

UPDATE (2017/1/4):
The wordDict parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.

Tags: Dynamic Programming
Similar Problems: (H) Word Break II



*** Python ***

class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: bool
        """
        if not s or not wordDict:
            return False
            
        maxlen, minlen = max(map(len, wordDict)), min(map(len, wordDict))   # record the length of longest and shortest word in wordDict
        d = set(wordDict)
        v = [False] * (len(s) + 1)      # record if s[:i] can be broke by words in wordDict
        v[0] = True
        numOfContinuousFalse = 0        # record the number of continuous false
        
        for i in range(1, len(s) + 1):
            for j in range(i - maxlen, i - minlen + 1):
                if j >= 0:
                    if v[j] and s[j:i] in d:        # s[:i] can be broke if s[:j] can be broke and s[j:i] is in the dictionary
                        v[i] = True
                        numOfContinuousFalse = 0    # clear it
                        break
            if not v[i]:                            # if cannot break for s[:i], increase the number of continuous false
                numOfContinuousFalse += 1
            if numOfContinuousFalse >= maxlen:      # if the number of continuous false is larger/equal than maxlen, then no need to continue
                break
                
        return v[len(s)]
                        
