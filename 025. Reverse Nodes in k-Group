Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Tags: Linked List
Similar Problems: (E) Swap Nodes in Pairs



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if k <= 1 or not head:
            return head
            
        dummyhead = ListNode(0)
        dummyhead.next = head
        p = head
        temp = [ListNode(0)] * k
        khead = dummyhead
        ktail = None
        
        while p != None:
            i = 0
            while i < k:
                if p == None:
                    break
                temp[i] = p
                p = p.next
                ktail = p
                i += 1
            
            if i != k:  # not enough element
                break
            else:
                for j in range(k - 1, 0, -1):   # reverse order of k elements
                    temp[j].next = temp[j - 1]
                khead.next = temp[k - 1]
                khead = temp[0]
                temp[0].next = ktail
        
        return dummyhead.next
