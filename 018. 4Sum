Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

Tags: Array, Hash Table, Two Pointers
Similar Problems: (E) Two Sum, (M) 3Sum



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        n = len(nums)
        if n < 4:
            return []
            
        nums.sort()
        result = set()
        for i in range(n - 3):
            for j in range(i + 1, n - 2):
                t = target - nums[i] - nums[j]
                k1, k2 = j + 1, n - 1
                while k1 < k2:
                    if (nums[k1] + nums[k2]) < t:
                        k1 += 1
                    elif (nums[k1] + nums[k2]) > t:
                        k2 -= 1
                    else:
                        result.add((nums[i], nums[j], nums[k1], nums[k2]))
                        k1 += 1
                        k2 -= 1
        
        return list(map(list, result))
