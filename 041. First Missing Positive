Given an unsorted integer array, find the first missing positive integer.

For example,
Given [1,2,0] return 3,
and [3,4,-1,1] return 2.

Your algorithm should run in O(n) time and uses constant space.

Tags: Array
Similar Problems: (M) Missing Number, (H) Find the Duplicate Number



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Use Index As Hash Table: T: O(n), S: O(1)
class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 1
            
        l = len(nums)
        i = 0
        while i < l:
            if 0 < nums[i] <= i and nums[i] != (i + 1) and nums[i] != nums[nums[i] - 1]:
                j = nums[i] - 1
                nums[i] = nums[i] ^ nums[j]
                nums[j] = nums[i] ^ nums[j]
                nums[i] = nums[i] ^ nums[j]
            else:
                i += 1
        
        for i in range(l):
            if nums[i] != (i + 1):
                return i + 1
        
        return l + 1
        
  ### Use Set(): T: O(n), S: O(1)
  class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        if not nums:
            return 1
            
        nums = set(nums)
        for i in range(1, len(nums) + 1):
            if i not in nums:
                return i
        
        return len(nums) + 1
