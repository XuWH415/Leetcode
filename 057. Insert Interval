Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

Tags: Array, Sort
Similar Problems: (H) Merge Intervals



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[Interval]
        :type newInterval: Interval
        :rtype: List[Interval]
        """
        if not intervals:
            return [newInterval]
        
        result = []
        l = len(intervals)
        flag = True
        for i in range(l):
            if intervals[i].start <= newInterval.start <= intervals[i].end or newInterval.start <= intervals[i].start <= newInterval.end:   # intervals[i] is overlapped with newInterval
                newInterval.start, newInterval.end = min(newInterval.start, intervals[i].start), max(newInterval.end, intervals[i].end)
            elif flag and intervals[i].start < newInterval.start:   # newInterval is behind the intervals[i]
                result.append(intervals[i])
            elif flag and intervals[i].start > newInterval.start:   # newInterval should be inserted here
                result.append(newInterval)
                result.append(intervals[i])
                flag = False
            else:   # finish up the rest of intervals
                result.append(intervals[i])
        
        if flag:
            result.append(newInterval)
        
        return result
