Given a collection of integers that might contain duplicates, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
Subscribe to see which companies asked this question

Hide Tags Array Backtracking



--------------------------------------------------------------------------------------------------------------------------------------


*** Python ***

### Backtrack Using Set():
class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        result = {()}
        for i in range(len(nums)):
            result |= {r + (nums[i], ) for r in result}
        
        result = [list(x) for x in result]
        
        return result
        
### Backtrack Without Set():
### Say we have: nums = [1, 2, 3, 3, 3], sorted already
### At first we have: result = [[]], t = [[]]
### When compute, t either comes from last result or last t, depends on whether a duplicate is found
### Round 1: result = [[], [1]], t = [[1]]
### Round 2: result = [[], [1], [2], [1, 2]], t = [[2], [1, 2]]
### Round 3: result = [..., [3], [1, 3], [2, 3], [1, 2, 3]], t = [[3], [1, 3], [2, 3], [1, 2, 3]]
### Round 4: result = [..., [3, 3], [1, 3, 3], [2, 3, 3], [1, 2, 3, 3]], t = [[3, 3], [1, 3, 3], [2, 3, 3], [1, 2, 3, 3]] where t directly comes from last t
### Round 5: result = [..., [3, 3, 3], [1, 3, 3, 3], [2, 3, 3, 3], [1, 2, 3, 3, 3]], t = [[3, 3, 3], [1, 3, 3, 3], [2, 3, 3, 3], [1, 2, 3, 3, 3]] where t directly comes from last t
class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if not nums:
            return []
            
        nums.sort()
        result = [[]]
        t = [[]]    # t only contains subsets with highest exponentiation for specific nums[i]
        last = nums[0]
        for i in range(len(nums)):
            if nums[i] == last: # if duplicate shows, there no need to re-compute the "lower exponentiation" part (refer as subsets whose number of nums[i] is smaller than the times nums[i] has already showed up)
                t = [x + [nums[i]] for x in t]
            else:
                last = nums[i]
                t = [x + [nums[i]] for x in result]
            
            result += t
        
        return result
        
