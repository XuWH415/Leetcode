Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

Tags: Array, Binary Search
Similar Problems: (M) Search a 2D Matrix II



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        row = len(matrix)
        col = len(matrix[0])
        
        i = 0
        j = row
        while i < j:    # binary search in first column, then binary search in specific row
            if j == (i + 1):
                p = i
                q = j
                i = 0
                j = col
                while i < j:
                    m = (i + j) // 2
                    if matrix[p][m] == target:
                        return True
                    elif matrix[p][m] > target:
                        j = m
                    else:
                        i = m + 1
                return False
            m = (i + j) // 2
            if matrix[m][0] == target:
                return True
            elif matrix[m][0] > target:
                j = m
            else:   # careful! even medium is smaller than target, it could still be inside the following row
                i = m
