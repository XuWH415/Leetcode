Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.

Tags: Tree, Stack, Design
Similar Problems: (M) Binary Tree Inorder Traversal, (M) Flatten 2D Vector, (M) Zigzag Iterator, (M) Peeking Iterator, (M) Inorder Successor in BST



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for a  binary tree node
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator(object):
    def __init__(self, root):
        """
        :type root: TreeNode
        """
        # we need to know the inorder of tree
        # start from root, push all left child into stack
        self.stack = []
        r = root
        while r:
            self.stack.append(r)
            r = r.left

    def hasNext(self):
        """
        :rtype: bool
        """
        return len(self.stack) != 0

    def next(self):
        """
        :rtype: int
        """
        # when pop out a node from stack, if the node has right child, push all left children of that node into stack
        p = self.stack.pop()
        r = p.right
        while r:
            self.stack.append(r)
            r = r.left
        
        return p.val
                
# Your BSTIterator will be called like this:
# i, v = BSTIterator(root), []
# while i.hasNext(): v.append(i.next())


