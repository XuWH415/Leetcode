Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Tags: Binary Search, Array
Similar Problems: (M) Search in Rotated Sorted Array II, (M) Find Minimum in Rotated Sorted 



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Divide & Binary Search: O(n) + O(lgn) = O(n)
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        if len(nums) == 1:
            if nums[0] != target:
                return -1
            else:
                return 0
        
        p = 0
        while p < (len(nums) - 1):
            if nums[p] > nums[p + 1]:
                break
            p += 1
        
        # part1: nums[0:p + 1], part2: nums[p + 1:]
        if target < nums[0] or target > nums[p]:    # target is not in part1
            if p != len(nums):  # part2 exists, search part2
                i = p + 1
                j = len(nums)
                while i < j:
                    m = i + (j - i) // 2
                    if nums[m] == target:
                        return m
                    elif nums[m] < target:
                        i = m + 1
                    else:
                        j = m
                return -1
            else:   # part2 doesn't exist
                return -1
        else:   # target is in part1, search part1
            i = 0
            j = p + 1
            while i < j:
                m = i + (j - i) // 2
                if nums[m] == target:
                    return m
                elif nums[m] < target:
                    i = m + 1
                else:
                    j = m
            return -1
            
### Binary Search: O(lgn)
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        
        i = 0
        j = len(nums)
        
        while i < j:
            m = (i + j) // 2
            if nums[m] == target:
                return m
            else:
                if nums[i] < nums[m]:   # [2,3,4,5,6,0,1], nums[m] = 5, nums[i] = 2, left half is sorted
                    if nums[i] <= target < nums[m]: # if target is between the left half
                        j = m
                    else:
                        i = m + 1
                else:   # [4,5,6,0,1,2,3], nums[m] = 0, nums[i] = 4, right half is sorted
                    if nums[m] < target <= nums[j - 1]: # if target is between the right half
                        i = m + 1
                    else:
                        j = m
            
        return -1
