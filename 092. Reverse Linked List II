Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

Tags: Linked List
Similar Problems: (E) Reverse Linked List



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseBetween(self, head, m, n):
        """
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """
        if m == n:
            return head
        
        dummyhead = ListNode(-1)
        dummyhead.next = head
        count = 0
        p = dummyhead
        before = dummyhead  # points to (m - 1)th nodes
        after = None    # points to (n + 1)th nodes
        reversehead = None  # points to head of reversed part
        reversetail = None  # points to tail of reversed part
        while p != None:
            if count == (m - 1):
                before = p
                p = p.next
            elif m <= count <= n:
                if count == m:
                    reversehead = p
                    reversetail = p
                    q = p
                    p = p.next
                elif count == n:
                    after = p.next
                    p.next = reversehead
                    reversehead = p
                    break
                else:
                    t = p
                    p = p.next
                    t.next = reversehead
                    reversehead = t
            else:
                p = p.next
                
            count += 1
        
        before.next = reversehead
        reversetail.next = after
        
        return dummyhead.next
