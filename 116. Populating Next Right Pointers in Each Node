Given a binary tree

    struct TreeLinkNode {
      TreeLinkNode *left;
      TreeLinkNode *right;
      TreeLinkNode *next;
    }
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Note:

You may only use constant extra space.
You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).
For example,
Given the following perfect binary tree,
         1
       /  \
      2    3
     / \  / \
    4  5  6  7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \  / \
    4->5->6->7 -> NULL

Tags: Tree, Depth-first Search
Similar Problems: (H) Populating Next Right Pointers in Each Node II, (M) Binary Tree Right Side View



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Make Use Of Next Pointer: T = O(n), S = O(n)
# Definition for binary tree with next pointer.
# class TreeLinkNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#         self.next = None
class Solution:
    # @param root, a tree link node
    # @return nothing
    def connect(self, root):
        if not root:
            return
        
        p = root
        nextfirst = p.left  # leftmost node in the next level
        
        while p:
            if p.left:  # chain the next level
                p.left.next = p.right
            else:   # last level
                break
            
            if p.next:  # if p has next node, chain the next level
                p.right.next = p.next.left
                p = p.next
            else:   # p is the rightmost node in this level, move to next level
                p = nextfirst
                nextfirst = p.left  # by the way, at this time p is definetely not null, so no error
