Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

Tags: Array, Two Pointers
Similar Problems: (E) Two Sum, (M) 3Sum Closest, (M) 4Sum, (M) 3Sum Smaller



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### No Sorting:
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if len(nums) < 3:
            return []
            
        from collections import Counter
        d = Counter(nums)
        si = set()
        s = set()
        for i in range(len(nums) - 2):
            if nums[i] not in si:
                si.add(nums[i])
                sj = set()
                d[nums[i]] -= 1
                for j in range(i + 1, len(nums) - 1):
                    if nums[j] not in sj:
                        sj.add(nums[j])
                        d[nums[j]] -= 1
                        if -(nums[i] + nums[j]) in d:
                            if d[-(nums[i] + nums[j])] > 0:
                                t = tuple(sorted([nums[i], nums[j], -(nums[i] + nums[j])]))
                                s.add(t)
                        d[nums[j]] += 1
                    else:
                        continue
                d[nums[i]] += 1
            else:
                continue
        
        return list(map(list, s))

### Sorting:
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if len(nums) < 3:
            return []
            
        nums.sort()
        n = len(nums)
        s = set()
        
        def twoSum(nums, i, j, t):
            result = []
            while i < j:
                if (nums[i] + nums[j]) < t:
                    i += 1
                elif (nums[i] + nums[j]) > t:
                    j -= 1
                else:
                    result.append([i, j])
                    i += 1
                    j -= 1
            return result
        
        for i in range(len(nums) - 2):
            r = twoSum(nums, i + 1, n - 1, -nums[i])
            if r:
                for p in r:
                    s.add((nums[i], nums[p[0]], nums[p[1]]))
        
        return list(map(list, s))
