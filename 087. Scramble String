Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

Tags: Dynamic Programming, String



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Dynamic Programming: O(n**3) because only i1, j2 and k matters eventually
class Solution(object):
    def isScramble(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        
        def solver(s1, i1, i2, s2, j1, j2, d):
            if  s1[i1:i2] == s2[j1:j2]: # if string match, return True
                return True
            
            if (i1, i2, j1, j2) in d:   # if already calculated, return result
                return d[i1, i2, j1, j2]
            
            find = False
            for k in range(1, i2 - i1): # two situation: swap or not swap
                find = find or (solver(s1, i1, i1 + k, s2, j2 - k, j2, d) and solver(s1, i1 + k, i2, s2, j1, j2 - k, d)) or (solver(s1, i1, i1 + k, s2, j1, j1 + k, d) and solver(s1, i1 + k, i2, s2, j1 + k, j2, d))
                if find:
                    break
            
            d[i1, i2, j1, j2] = find
            return find
        
        d = dict()
        
        if len(s1) != len(s2):
            return False
            
        return solver(s1, 0, len(s1), s2, 0, len(s2), d)
