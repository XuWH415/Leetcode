Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Tags: Tree, Depth-first Search
Similar Problems: (E) Balanced Binary Tree, (E) Minimum Depth of Binary Tree



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Depth First Search: T = O(n), O(lgn) <= S <= O(n)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        
        left = self.maxDepth(root.left)
        right = self.maxDepth(root.right)
        
        return max(left, right) + 1

### Breadth First Search: T = O(n), S <= O(n)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        
        level = [root]
        depth = 0
        while level:
            newlevel = []
            for n in level:
                if n.left:
                    newlevel.append(n.left)
                if n.right:
                    newlevel.append(n.right)
            depth += 1
            level = newlevel
        
        return depth
