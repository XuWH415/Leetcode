Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]

Tags: Tree, Depth-first Search
Similar Problems: (E) Path Sum, (E) Binary Tree Paths



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        if not root:
            return []
        
        if not root.left and not root.right:
            if root.val == sum:
                return [[root.val]]
            else:
                return []
        
        result = []
        if root.left:
            result += self.pathSum(root.left, sum - root.val)
        if root.right:
            result += self.pathSum(root.right, sum - root.val)
        
        for p in result:
            p.insert(0, root.val)
        
        return result
