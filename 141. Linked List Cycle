Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

Tags: Linked List, Two Pointers
Similar Problems: (M) Linked List Cycle II



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Two Pointers: T = O(n), S = O(1)
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        slow = fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                return True
        return False
        
### Record Path: T = O(n), S <= O(n)
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        s = set()
        p = head
        while p:
            if p in s:
                return True
            s.add(p)
            p = p.next
        return False
