You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

Tags: Linked List, Math
Similar Problems: (M) Multiply Strings, (E) Add Binary, (E) Sum of Two Integers



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        carry = 0
        temp = 0
        i1 = l1
        last1 = None
        i2 = l2
        last2 = None
        while i1 and i2:
            temp = i1.val + i2.val + carry
            carry = temp // 10
            temp = temp % 10
            i1.val = i2.val = temp
            last1 = i1
            last2 = i2
            i1 = i1.next
            i2 = i2.next
        if i1:  # l1 is longer
            while i1:
                temp = i1.val + carry
                carry = temp // 10
                temp = temp % 10
                i1.val = temp
                last1 = i1
                i1 = i1.next
            if carry != 0:  # add another node
                p = ListNode(carry)
                last1.next = p
            return l1
        else:   # l2 is longer
            while i2:
                temp = i2.val + carry
                carry = temp // 10
                temp = temp % 10
                i2.val = temp
                last2 = i2
                i2 = i2.next
            if carry != 0:  # add another node
                p = ListNode(carry)
                last2.next = p
            return l2
            
        return l1
