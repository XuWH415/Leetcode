Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.

Tags: Dynamic Programming
Similar Problems: (M) Palindrome Partitioning

Reference: http://bangbingsyb.blogspot.com/2014/11/leetcode-palindrome-partitioning-i-ii.html
						https://discuss.leetcode.com/topic/22388/56-ms-python-with-explanation



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Dynamic Programming:
### FAILED: TLE
class Solution(object):
    def isPalindrome(self, s, isPal):
        for start in range(len(s)):
            i = 0
            flag = True
            while start - i >= 0 and start + i < len(s):
                if flag and s[start - i] != s[start + i]:
                    flag = False
                isPal[start - i, start + i + 1] = flag
                i += 1
                
            i = 0
            flag = True
            while start - i >= 0 and start + i + 1 < len(s):
                if flag and s[start - i] != s[start + i + 1]:
                    flag = False
                isPal[start - i, start + i + 2] = flag
                i += 1
        return
        
    def minCut(self, s):
        """
        :type s: str
        :rtype: int
        """
        isPal = dict()
        self.isPalindrome(s, isPal)
        d = [float('inf')] * (len(s) + 1)
        d[0] = -1
        for i in range(len(s) + 1):
            for j in range(i - 1, -1, -1):
                if isPal[j, i]:
                    d[i] = min(d[i], d[j] + 1)
                    
        return d[len(s)]
				
### Dynamic Programming: T = O(n^2), S = O(n)
class Solution(object):
    def minCut(self, s):
        """
        :type s: str
        :rtype: int
        """
        l = len(s)
				
				# two extra speedup steps
        if s == s[::-1]:				# if s itself is palindrome
            return 0
        for i in range(1, l):		# if s could be divided to two palindromes
            if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:
                return 1
        
				# real computation
        d = [i - 1 for i in range(l + 1)]			# number of cuts in s[:i] for index i in d
        for i in range(l):
            j = 0
            while i - j >= 0 and i + j < l and s[i - j] == s[i + j]:					# odd length palindrome
                d[i + j + 1] = min(d[i + j + 1], d[i - j] + 1)
                j += 1
            
            j = 0
            while i - j >= 0 and i + j + 1 < l and s[i - j] == s[i + j + 1]:	# even length palindrome
                d[i + j + 2] = min(d[i + j + 2], d[i - j] + 1)
                j += 1
        
        return d[l]
