Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the word list
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
Return
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]
Note:
All words have the same length.
All words contain only lowercase alphabetic characters.

Tags: Array, Backtracking, Breadth-first Search, String

Reference: http://bangbingsyb.blogspot.com/2014/11/leetcode-word-ladder-i-ii.html



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Find Neighbor By Checking Every Word In Dictionary (Single Direction BFS)
### Consider Search Neighbor Time Only: T = O(w * n) where w is length of word and n is size of dict, S = O(n)
### Consider Branch Time Only: T = O(n^d) where d is distance between beginWord and endWord
### FAILED!!! EXCEED TIME LIMIT!!!
class Solution(object):
    def findLadders(self, beginWord, endWord, wordlist):
        """
        :type beginWord: str
        :type endWord: str
        :type wordlist: Set[str]
        :rtype: List[List[str]]
        """
        def isNeighbor(w1, w2): # decide if w2 is a neighbor of w1, O(w)
            diff = 0
            for i in range(len(w1)):
                if w1[i] != w2[i]:
                    diff += 1
            
            return diff < 2
        
        if isNeighbor(beginWord, endWord):
            return [[beginWord, endWord]]
        
        wordlist.add(endWord)
        newlist = [beginWord] + list(wordlist)
        l = len(newlist)
        
        visited = [False] * l
        visited[0] = True
        level = [[0]]
        
        stop = False
        result = []
        
        while level:
            if stop:
                break
            newlevel = []
            for i in range(len(level)): # O(n)
                for j in range(1, l):   # O(n)
                    if not visited[j] and isNeighbor(newlist[level[i][-1]], newlist[j]):    # O(w)
                        if newlist[j] == endWord:
                            stop = True
                            result.append(level[i] + [j])
                        newlevel.append(level[i] + [j])
                        
            for i in newlevel:
                visited[i[-1]] = True
            
            level = newlevel
        
        newresult = []
        for r in result:
            t = []
            for i in range(len(r)):
                t.append(newlist[r[i]])
            newresult.append(t)
        
        
        return newresult
        
### Find Neighbor By Checking Whether The Variants Are In Dictionary (Single BFS)
### Consider Search Neighbor Time Only: T = O(w * 26) where w is length of words, S = O(n)
### Consider Branch Time Only: T = O(n^d) where n is size of dict and d is distance between beginWord and endWord
class Solution(object):
    def findLadders(self, beginWord, endWord, wordlist):
        """
        :type beginWord: str
        :type endWord: str
        :type wordlist: Set[str]
        :rtype: List[List[str]]
        """
        def findNeighbor(w, level, d):  # find neighbors of w in d, O(26 * w)
            a = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}
            n = set()
            for i in range(len(w)): # find neighbors by checking whether every variant of w is in d
                n |= {(w[:i] + c + w[i + 1:]) for c in a if c != w[i] and (w[:i] + c + w[i + 1:]) in d and (w[:i] + c + w[i + 1:]) not in level}
            
            return n
            
        if beginWord == endWord:
            return [[endWord]]
            
        wordlist.add(endWord)
        wordlist.add(beginWord)
        d = {k: [] for k in wordlist}
        d[beginWord].append([beginWord])
        
        level = {beginWord}
        stop = False
        
        while level:
            neighbors = set()
            for w in level: O(n)
                neighbor = findNeighbor(w, level, d)    # O(26 * w)
                for n in neighbor:
                    d[n] += [x + [n] for x in d[w]]
                    if n == endWord:
                        stop = True
                neighbors |= neighbor
                
            if stop:
                break
            
            for w in level:
                d.pop(w)
                
            level = neighbors
        
        return d[endWord]
