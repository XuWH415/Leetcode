Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.


Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.
Credits:
Special thanks to @stellari for adding this problem and creating all test cases.

Tags: Linked List



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if not headA or not headB:
            return None
        
        a = headA
        b = headB
        
        while a != b:
            a = a.next if a else headB
            b = b.next if b else headA
            
        return a

*** C ***

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {
    if (headA == NULL || headB == NULL) {
        return NULL;
    }
    
    struct ListNode* a = headA, *b = headB, *p;
    
    while (a != NULL && b != NULL) {    // find the difference of length and align them
        a = a->next;
        b = b->next;
    }
    if (b == NULL) {
        p = a;
        a = headA;
        b = headB;
        while (p != NULL) {
            p = p->next;
            a = a->next;
        }
    }
    else {
        p = b;
        a = headA;
        b = headB;
        while (p != NULL) {
            p = p->next;
            b = b->next;
        }
    }
    
    while (a != NULL && b != NULL) {    // now they are aligned so can move together
        if (a == b)
            break;
        else {
            a = a->next;
            b = b->next;
        }
    }
    return a;
}
