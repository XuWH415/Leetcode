Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

Tags: Dynamic Programming String
Similar Problems: (M) One Edit Distance



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        import copy
        
        l1 = len(word1)
        l2 = len(word2)
        
        # d[i][j] means steps needed to transform word1[:i] to word2[:j]
        old = [x for x in range(l2 + 1)]
        new = [0] * (l2 + 1)
        
        for i in range(1, l1 + 1):
            new[0] = i
            for j in range(1, l2 + 1):
                if word1[i - 1] == word2[j - 1]:
                    new[j] = old[j - 1]
                else:
                    insert = new[j - 1] + 1 # str1 needs to insert one letter to match str2 
                    delete = old[j] + 1     # str1 needs to delete one letter to match str2
                    replace = old[j - 1] + 1    # str1 needs to replace one letter to match str2
                    new[j] = min(insert, delete, replace)   # find the minimum steps to match
                
            old = copy.copy(new)
        
        return old[l2]
