Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree [1,null,2,3],
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?

Tags: Tree, Hash Table, Stack
Similar Problems: (M) Validate Binary Search Tree, (M) Binary Tree Preorder Traversal, (H) Binary Tree Postorder Traversal, (M) Binary Search Tree Iterator, (M) Kth Smallest Element in a BST, (H) Closest Binary Search Tree Value II, (M) Inorder Successor in BST



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Recursion:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        def solver(cur, result):
            if not cur:
                return
            solver(cur.left, result)
            result.append(cur.val)
            solver(cur.right, result)
        
        result = []
        solver(root, result)
        
        return result

### Broad-First Search:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        
        curlist = [root]
        leafnode = set()
        leafnode.add(root)
        change = True
        
        while change:
            change = False
            newlist = []
            newleaf = set()
            for p in curlist:
                if p in leafnode:
                    if p.left != None:
                        newlist.append(p.left)
                        newleaf.add(p.left)
                        change = True
                        
                    newlist.append(p)
                    
                    if p.right != None:
                        newlist.append(p.right)
                        newleaf.add(p.right)
                        change = True
                else:
                    newlist.append(p)
                
            curlist = newlist
            leafnode = newleaf
        
        return [x.val for x in curlist]

### Stack:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        cur = root
        stack = []
        result = []
        while cur or stack:
            if not cur:
                t = stack.pop()
                result.append(t.val)
                cur = t.right
            else:
                stack.append(cur)
                cur = cur.left
        
        return result
