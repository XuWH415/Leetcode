Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.

Tags: Array, Dynamic Programming

Reference: http://bangbingsyb.blogspot.com/2014/11/leetcode.html



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### S = O(2*n)
class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        import copy
        if not triangle:
            return 0
            
        l = len(triangle)
        prepath = [float(inf)] * l
        curpath = [0] * l
        prepath[0] = triangle[0][0]
        for i in range(1, l):
            curpath[0] = prepath[0] + triangle[i][0]    # first element
            curpath[i] = prepath[i - 1] + triangle[i][i]    # last element
            for j in range(1, i):   # elements in the middle
                curpath[j] = min(prepath[j - 1], prepath[j]) + triangle[i][j]
            
            prepath = copy.copy(curpath)
        
        return min(prepath)
