Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Tags: Array, Greedy
Similar Problems: (E) Best Time to Buy and Sell Stock, (H) Best Time to Buy and Sell Stock III, (H) Best Time to Buy and Sell Stock IV, (M) Best Time to Buy and Sell Stock with Cooldown



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Peak Valley: T = O(n), S = O(1)
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        l = len(prices)
        if l == 0 or l == 1:
            return 0
            
        profit = 0
        premin = 0
        setmin = True
        for i in range(l - 1):
            if prices[i + 1] >= prices[i]:
                if setmin:
                    continue
                else:
                    premin = i
                    setmin = True
            else:
                if setmin:
                    profit += prices[i] - prices[premin]
                    setmin = False
                else:
                    continue
        
        if setmin:
            profit += prices[-1] - prices[premin]
        
        return profit
        
### Augment Path: T = O(n), S = O(1)
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        l = len(prices)
        if l == 0 or l == 1:
            return 0
            
        profit = 0
        for i in range(1, l):
            if prices[i] > prices[i - 1]:
                profit += prices[i] - prices[i - 1]
        
        return profit
