Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X

Tags: Breadth-first Search, Union Find
Similar Problems: (M) Number of Islands, (M) Walls and Gates



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### T = O(n), S = O(1)
class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        def branch(board, row, col, i, j):  # branch from the border
            board[i][j] = 'Y'
            level = [(i, j)]
            while level:
                n = level[0]
                
                if n[0] > 0 and board[n[0] - 1][n[1]] == 'O':
                    level.append((n[0] - 1, n[1]))
                    board[n[0] - 1][n[1]] = 'Y'
                if n[0] < (row - 1) and board[n[0] + 1][n[1]] == 'O':
                    level.append((n[0] + 1, n[1]))
                    board[n[0] + 1][n[1]] = 'Y'
                if n[1] > 0 and board[n[0]][n[1] - 1] == 'O':
                    level.append((n[0], n[1] - 1))
                    board[n[0]][n[1] - 1] = 'Y'
                if n[1] < (col - 1) and board[n[0]][n[1] + 1] == 'O':
                    level.append((n[0], n[1] + 1))
                    board[n[0]][n[1] + 1] = 'Y'
                    
                del level[0]
        
        def locate(board, row, col):    # locate 'O' on border
            for i in range(col):
                if board[0][i] == 'O':
                    branch(board, row, col, 0, i)
                if board[row - 1][i] == 'O':
                    branch(board, row, col, row - 1, i)
            for i in range(1, row - 1):
                if board[i][0] == 'O':
                    branch(board, row, col, i, 0)
                if board[i][col - 1] == 'O':
                    branch(board, row, col, i, col - 1)
                
        if not board:
            return
        
        row = len(board)
        col = len(board[0])
        locate(board, row, col)
        
        for i in range(row):
            for j in range(col):
                if board[i][j] == 'O':  # change 'O' to 'X'
                    board[i][j] = 'X'
                if board[i][j] == 'Y':  # change 'Y' to 'O'
                    board[i][j] = 'O'
