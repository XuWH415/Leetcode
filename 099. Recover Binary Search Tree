Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Note:
A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?

Tags: Tree, Depth-first Search

Reference: https://discuss.leetcode.com/topic/3988/no-fancy-algorithm-just-simple-and-powerful-in-order-traversal



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Recursive Inorder Search: T = O(n), O(n) >= S >= O(lgn)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        def inorderTraverse(root, prev, first, second):
            if not root:
                return
            
            inorderTraverse(root.left, prev, first, second)
            
            if prev[0] and prev[0].val > root.val:
                if not first[0]:
                    first[0] = prev[0]
                second[0] = root
                
            prev[0] = root
            
            inorderTraverse(root.right, prev, first, second)
        
        
        first = [None]
        second = [None]
        prev = [None]
        
        inorderTraverse(root, prev, first, second)
        
        t = first[0].val
        first[0].val = second[0].val
        second[0].val = t
