Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Tags: Tree, Depth-first Search
Similar Problems: (E) Maximum Depth of Binary Tree



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Bottom-Up: T = O(n), S = O(1)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def solver(root):
            if not root:
                return True, 0
            
            leftbalance, leftdepth = solver(root.left)
            if not leftbalance: # check left subtree
                return False, -1
                
            rightbalance, rightdepth = solver(root.right)
            if not rightbalance:    # check right subtree
                return False, -1
            
            if abs(leftdepth - rightdepth) > 1: # check whether balanced
                return False, -1
            
            return True, max(leftdepth, rightdepth) + 1
        
        result, maxdepth = solver(root)
        
        return result
