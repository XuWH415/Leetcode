Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You must do this in-place without altering the nodes' values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.

Tags: Linked List

Reference: http://bangbingsyb.blogspot.com/2014/11/leetcode-reorder-list.html



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Find Medium, Reverse Second Half and Merge Back: T = O(n), S = O(1)
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: void Do not return anything, modify head in-place instead.
        """
        dummyhead1 = ListNode(-1)   # add dummyhead1 to make situation easier
        dummyhead1.next = head
        slow = fast = dummyhead1    # use slow and fast pointer to find the medium in the list
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
        dummyhead2 = ListNode(-2)   # reverse the second half and linked them to dummyhead2
        p = slow.next
        slow.next = None
        while p:
            q = p.next
            p.next = dummyhead2.next
            dummyhead2.next = p
            p = q
        
        p = dummyhead1.next
        q = dummyhead2.next
        while q:                    # merge two lists
            dummyhead2.next = q.next
            q.next = p.next
            p.next = q
            p = q.next
            q = dummyhead2.next
