Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

Tags: Backtracking, String
Similar Problems: (M) Letter Combinations of a Phone Number, (E) Valid Parentheses



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        if n <= 0:
            return []
        
        if n == 1:
            return ['()']
        else:
            r = self.generateParenthesis(n - 1)
            result = set()
            for s in r:
                l = len(s)
                for i in range(l + 1):
                    result.add(s[:i] + '()' + s[i:l])
                    
            return list(result)
