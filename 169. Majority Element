Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.

Tags: Array, Divide and Conquer, Bit Manipulation
Similar Problems: (M) Majority Element II

Reference: https://discuss.leetcode.com/topic/17446/6-suggested-solutions-in-c-with-explanations/2



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Moore Voting: T = O(n), S = O(1)
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        majority = None
        count = 0
        for n in nums:
            if count == 0:
                majority = n
                count = 1
            elif n == majority:
                count += 1
            else:
                count -= 1
        
        return majority

### Sorting: T = O(nlgn), S = O(1)
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """        
        nums.sort()
        return nums[len(nums) // 2]
