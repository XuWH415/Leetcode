Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6

Tags: Stack
Similar Problems: (H) Basic Calculator, (H) Expression Add Operators



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        stack = []
        operator = {'+', '-', '*', '/'}
        for n in tokens:
            if n not in operator:
                stack.append(int(n))
            elif n == '+':
                b = stack.pop()
                a = stack.pop()
                stack.append(a + b)
            elif n == '-':
                b = stack.pop()
                a = stack.pop()
                stack.append(a - b)
            elif n == '*':
                b = stack.pop()
                a = stack.pop()
                stack.append(a * b)
            else:
                b = stack.pop()
                a = stack.pop()
                if a * b < 0:
                    stack.append(-(-a // b))
                else:
                    stack.append(a // b)
                        
        return stack[0]
