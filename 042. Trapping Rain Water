Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Subscribe to see which companies asked this question

Hide Tags Array Stack Two Pointers
Hide Similar Problems (M) Container With Most Water (M) Product of Array Except Self



-----------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### One Pointer Two Passes
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if len(height) < 3:
            return 0
            
        right = [0] * len(height)
        result = 0
        
        m = len(height) - 1
        for i in range(len(height) - 1, -1, -1):    # find max height on the right for each i
            if height[i] > height[m]:   # update max height
                m = i
            right[i] = height[m]
        
        m = 0
        for i in range(len(height)):    # find max height on the left for each i and calculate water level
            if height[i] > height[m]:   # update max height
                m = i
            result += min(right[i], height[m]) - height[i]  # calculate water above
        
        return result
        
### Two Pointers One Pass
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if len(height) < 3:
            return 0
            
        maxleft = 0
        maxright = 0
        left = 0
        right = len(height) - 1
        result = 0
        
        while left < right:
            if height[left] <= height[right]:
                if height[left] >= maxleft:
                    maxleft = height[left]
                else:
                    result += maxleft - height[left]
                left += 1
            else:
                if height[right] >= maxright:
                    maxright = height[right]
                else:
                    result += maxright - height[right]
                right -= 1
        
        return result

### Stack
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if len(height) < 3:
            return 0
            
        stack = []
        result = 0
        i = 0
        
        while i < len(height):
            if not stack or height[stack[-1]] >= height[i]:
                stack.append(i)
                i += 1
            else:
                t = height[stack.pop()]
                if stack:
                    result += (min(height[i], height[stack[-1]]) - t) * (i - stack[-1] - 1)
                    
        return result
        
