Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.

Tags: Array, Binary Search
Similar Problems: (M) Find Minimum in Rotated Sorted Array



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### T <= O(n), S = O(1)
class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return None
        
        i, j = 0, len(nums) - 1
        
        while i < j:
            m = i + (j - i) // 2    # use this instead of m = (i + j) // 2 in case of overflow
            if nums[m] < nums[j]:
                j = m
            elif nums[m] > nums[j]:
                i = m + 1
            else: # cannot be sure about which side contains the minimum, but can be sure that last one is not the "sole" minimum
                j -= 1
        
        return nums[i]
