The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

Tags: Backtracking
Similar Problems: (H) N-Queens II



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

class Solution(object):
    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        if n < 1:
            return []
        
        def nQueensSolver(n, prev, result):
            if n == len(prev):
                result.append(prev)
                return
            
            for i in range(n):
                if not prev:
                    nQueensSolver(n, [i], result)
                else:
                    flag = True
                    for j in range(len(prev)):
                        flag  = flag and i != prev[j] and (len(prev) - j) != abs(i - prev[j])
                        if not flag:
                            break
                    if flag:
                        nQueensSolver(n, prev + [i], result)
        
        def translateToMap(n, result):
            r = []
            for m in result:
                t1 = []
                for col in m:
                    t2 = ''
                    for i in range(n):
                        if i == col:
                            t2 += 'Q'
                        else:
                            t2 += '.'
                    t1.append(t2)
                r.append(t1)
            
            return r
        
        result = []
        nQueensSolver(n, [], result)
        return translateToMap(n, result)
