Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

For example,
Given:
s1 = "aabcc",
s2 = "dbbca",

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.

Tags: Dynamic Programming, String



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Dynamic Programming With Stack: T <= O(n**2), S <= O(n**2)
class Solution(object):
    def isInterleave(self, s1, s2, s3):
        """
        :type s1: str
        :type s2: str
        :type s3: str
        :rtype: bool
        """
        def mark(t, path, d):   # it's a dead end from t to the end of current path
            while path[-1] != t:    # t will not be erased from path because another trail from t might work
                p = path.pop()
                d.add(tuple(p))
        
        l1, l2, l3 = len(s1), len(s2), len(s3)
        if (l1 + l2) != l3: # if length doesn't match, then there is no way there will be a match
            return False
            
        d = set()   # record which index indicates a dead end
        stack = []  # record branching indexes
        path = []   # record path of indexes
        i = j = k = 0   # current index of s1, s2, s3
        
        while k < l3:
            if (i, j) in d: # (i, j) is a dead end
                if stack:   # other branches are available
                    t = stack.pop()
                    mark(t, path, d)
                    i, j, k = t[0], t[1] + 1, t[0] + t[1] + 1
                else:
                    return False
            elif i == l1:   # if i reach to the end of s1
                if s3[k] == s2[j]:
                    path.append([i, j])
                    k += 1
                    j += 1
                elif stack: # other branches are available
                    d.add((i, j))   # (i, j) is a dead end
                    t = stack.pop()
                    mark(t, path, d)
                    i, j, k = t[0], t[1] + 1, t[0] + t[1] + 1
                else:
                    return False
            elif j == l2:   # if j reach to the end of s2
                if s3[k] == s1[i]:
                    path.append([i, j])
                    k += 1
                    i += 1
                elif stack: # other branches are available
                    d.add((i, j))   # (i, j) is a dead end
                    t = stack.pop()
                    mark(t, path, d)
                    i, j, k = t[0], t[1] + 1, t[0] + t[1] + 1
                else:
                    return False
            elif s3[k] == s1[i] and s3[k] == s2[j]: # when both s1[i] and s2[j] match s3[k], always choose s1[i] first
                path.append([i, j])
                stack.append([i, j])    # push branching index (i, j) into stack
                i += 1
                k += 1
            elif s3[k] == s1[i]:
                path.append([i, j])
                i += 1
                k += 1
            elif s3[k] == s2[j]:
                path.append([i, j])
                j += 1
                k += 1
            else:   # neither s1[i] nor s2[j] matchs s3[k]
                if stack:   # other branches are available
                    d.add((i, j))   # (i, j) is a dead end
                    t = stack.pop()
                    mark(t, path, d)
                    i, j, k = t[0], t[1] + 1, t[0] + t[1] + 1
                else:
                    return False
        
        return True
        
### Dynamic Programming: T = O(n**2), S = O(n**2)
class Solution(object):
    def isInterleave(self, s1, s2, s3):
        """
        :type s1: str
        :type s2: str
        :type s3: str
        :rtype: bool
        """
        l1, l2, l3 = len(s1), len(s2), len(s3)
        if (l1 + l2) != l3:
            return False
        
        # d[i][j] means whether s1[:i] and s2[:j] match s3[:i + j - 1]
        d = [[False] * (l2 + 1) for x in range(l1 + 1)]
        
        for i in range(l1 + 1):
            for j in range(l2 + 1):
                if i == 0 and j == 0:   # both are empty string
                    d[i][j] = True
                elif i == 0:    # s1[:i] is emty string
                    d[i][j] = s2[j - 1] == s3[j - 1] and d[0][j - 1]
                elif j == 0:    # s2[:j] is empty string
                    d[i][j] = s1[i - 1] == s3[i - 1] and d[i - 1][0]
                else:   # both current and previous need to be matched
                    d[i][j] = ((s1[i - 1] == s3[i + j - 1]) and d[i - 1][j]) or ((s2[j - 1] == s3[i + j - 1]) and d[i][j - 1])
        
        return d[l1][l2]
