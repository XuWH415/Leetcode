Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

Tags: Dynamic Programming, String
Similar Problems: (E) Valid Parentheses



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Stack:
class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0
        
        stack = [-1]    # dummy value for easier coding
        slen = 0
        maxlen = 0
        
        for i in range(len(s)):
            if s[i] == '(': # push stack
                stack.append(i)
                slen += 1
            else:
                if slen == 0:
                    stack.append(i)
                    slen += 1
                else:
                    if s[stack[-1]] == '(': # a match with the stack top
                        stack.pop()
                        slen -= 1
                        maxlen = max(maxlen, i - stack[-1]) # update maxlen. p.s. when stack is "empty", it will be: i - (-1)
                    else:
                        stack.append(i)
                        slen += 1
        
        return maxlen
        
### Dynamic Programming:
class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0
        
        d = dict()  # d[i] is the length of longest valid parentheses end at s[i]
        d[-1] = 0   # dummy value
        maxlen = 0
        
        for i in range(len(s)):
            if s[i] == '(':
                d[i] = 0
            else:
                if (i - 1) < 0 or (i - d[i - 1] - 1) < 0:   # there is not enough character at front to match current ')'
                    d[i] = 0
                else:
                    if s[i - d[i - 1] - 1] == '(':  # find a match for current ')'
                        d[i] = d[i - d[i - 1] - 2] + d[i - 1] + 2   # concatenate with possible parentheses before
                    else:   # not a match for current ')'
                        d[i] = 0
            
            maxlen = max(maxlen, d[i])  # update maxlen
        
        return maxlen
