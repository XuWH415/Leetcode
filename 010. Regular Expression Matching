Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

Tags: Dynamic Programming, Backtracking, String
Similar Problems: (H) Wildcard Matching




-----------------------------------------------------------------------------------------------------------------------------------



*** Python ***

class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        
        def findNextNot(s, i, c):   # find the next character in s from index i that is not c
            j = i
            while j < len(s):
                if s[j] == c:
                    j += 1
                else:
                    break
            return j
        
        def match(s, i, p, j, d):
            if (i, j) in d: # when it's been dealt with already
                return d[i, j]
            
            if i == len(s) or j == len(p):  # when encounter end of string
                if i == len(s) and j == len(p): # both ends are met, has found a match
                    d[i, j] = True
                    return True
                elif i == len(s) and j < len(p):    # meet end of the first string, further check
                    if j < (len(p) - 1) and p[j + 1] == '*':    # skip because "*" is found
                        jj = findNextNot(p, j + 1, '*')
                        d[i, j] = match(s, i, p, jj, d)
                        return d[i, j]
                    else:   # not a match
                        d[i, j] = False
                        return False
                else:   # meet end of the second string, not a match
                    d[i, j] = False
                    return False
                
            if p[j] == '.': # "." match
                if j < (len(p) - 1) and p[j + 1] == '*':
                    jj = findNextNot(p, j + 1, '*')
                    temp = False
                    for k in range(i, len(s) + 1):  # "len(s) + 1" because ".*" may match the rest of s
                        temp = temp or match(s, k, p, jj, d)
                        if temp:    # shortcut if has found a match
                            break
                    d[i, j] = temp
                    return temp
                else:   # single ".", just match any one character
                    d[i, j] = match(s, i + 1, p, j + 1, d)
                    return d[i, j]
            elif p[j] == '*':
                return False
            else:   # character match
                if s[i] == p[j]:
                    if j < (len(p) - 1) and p[j + 1] == '*':    # a character match with "*"
                        ii = findNextNot(s, i, s[i])
                        jj = findNextNot(p, j + 1, '*')
                        temp = False
                        for k in range(i, ii + 1):  # "ii + 1" because p[jj] may match to s[ii]
                            temp = temp or match(s, k, p, jj, d)
                            if temp:    # shortcut if has found a match
                                break
                        d[i, j] = temp
                        return temp
                    else:   # a character match, move to the next characters
                        d[i, j] = match(s, i + 1, p, j + 1, d)
                        return d[i, j]
                else:
                    if j < (len(p) - 1) and p[j + 1] == '*':    # not a character match but with "*"
                        jj = findNextNot(p, j + 1, '*')
                        d[i, j] = match(s, i, p, jj, d)
                        return d[i, j]
                    else:   # not a match
                        d[i, j] = False
                        return False
        
        d = dict()            
        return match(s, 0, p, 0, d)
