Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.

Tags: Tree, Depth-first Search
Similar Problems: (M) Binary Tree Inorder Traversal



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

### Inorder Search
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def solver(root, curmax):
            if not root:
                return True
                
            if not solver(root.left, curmax):   # update curmax by walk through left tree
                return False
                
            if curmax[0] >= root.val:   # max value in left tree is equal or greater than current value
                return False
                
            curmax[0] = root.val    # update curmax, this is very important
            
            return solver(root.right, curmax)
        
        curmax = [-float('inf')]    # use a list instead of a float because Python pass list by reference while passing float by value
        
        return solver(root, curmax)
