Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

Credits:
Special thanks to @amrsaqr for adding this problem and creating all test cases.

Tags: Tree, Depth-first Search, Breadth-first Search
Similar Problems: (M) Populating Next Right Pointers in Each Node



--------------------------------------------------------------------------------------------------------------------------------------




*** Python ***

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        
        level = [root]
        newlevel = []
        result = []
        while 1:
            if not level:
                break
            
            result.append(level[0].val) # add right-most node of each level to result
            newlevel = []
            for n in level: # explore next level from right to left
                if n.right:
                    newlevel.append(n.right)
                if n.left:
                    newlevel.append(n.left)
            
            level = newlevel
        
        return result
