Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

Tags: Tree, Dynamic Programming
Similar Problems: (M) Unique Binary Search Trees, (M) Different Ways to Add Parentheses



----------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]
        """
        def solver(start, end, d):
            if start >= end:
                return []
                
            if (start, end) in d:
                return d[start, end]
            
            if (start + 1) == end:
                d[start, end] = [TreeNode(start)]
                return d[start, end]
            
            result = []
            for i in range(start, end): # number i divide range [start, end) into [start, i) and [i + 1, end)
                left = solver(start, i, d)
                right = solver(i + 1, end, d)
                if left == []:  # [start, i) is empty
                    for j in right:
                        t = TreeNode(i)
                        t.right = j
                        result.append(t)
                elif right == []:   # [i + 1, end) is empty
                    for j in left:
                        t = TreeNode(i)
                        t.left = j
                        result.append(t)
                else:
                    for j in left:
                        for k in right:
                            t = TreeNode(i)
                            t.left = j
                            t.right = k
                            result.append(t)
            
            d[start, end] = result
            
            return result
            
        d = dict()
        result = solver(1, n + 1, d)
        
        return result
