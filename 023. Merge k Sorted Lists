Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Tags: Divide and Conquer, Linked List, Heap
Similar Problems: (E) Merge Two Sorted Lists, (M) Ugly Number II



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class PriorityQueue(object):    # a priority queue class
    def __init__(self, l = []): # initialize priority queue
        self.pqueue = sorted(l)
        self.length = len(l)
    
    def insert(self, x):    # insert x into priority queue
        if self.length == 0:
            self.pqueue.append(x)
            self.length += 1
        else:
            import bisect   # a module focusing on finding insert point into sorted list
            bisect.insort_left(self.pqueue, x)  # insert x into sorted queue
            self.length += 1
    
    def pop(self):  # pop out one element from the top of queue
        if self.length > 0:
            self.length -= 0
            return self.pqueue.pop(0)
        return
    
    def getLen(self):   # get queue length
        return self.length

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if not lists:
            return None
            
        k = len(lists)
        pointers = [lists[x] for x in range(k)] # pointers pointing at the head of each sorted list
        pqueue = PriorityQueue([(pointers[i].val, i) for i in range(k) if pointers[i]]) # initialize priority queue using pointers
        
        head = ListNode(0)  # a psuedo-head
        p = head
        count = pqueue.getLen()
        
        while count > 0:
            t = pqueue.pop()[1]
            p.next = pointers[t]
            p = p.next
            count -= 1
            
            pointers[t] = pointers[t].next
            
            if pointers[t] != None:
                pqueue.insert((pointers[t].val, t))
                count += 1
                
        return head.next
