Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

Tags: Linked List
Similar Problems: (H) Reverse Nodes in k-Group



--------------------------------------------------------------------------------------------------------------------------------------



*** Python ***

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return head
        
        h = ListNode(0)
        h.next = head
        p = h
        p1 = h.next
        while p1 != None and p1.next != None:
            p2 = p1.next
            
            p1.next = p2.next
            p2.next = p1
            p.next = p2
            
            p = p1
            p1 = p.next
            
        return h.next
